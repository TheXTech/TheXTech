name: Ubuntu TAR CI

on:
  push:
    branches:
      - main
      - devel
      - versus-ci
      - versus-ci-ubuntu
  pull_request:
    branches:
      - main

jobs:
  build:
    name: "${{ matrix.config.name }} | ${{ matrix.config.build_type }}"
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "TAR Ubuntu 16.04 x86_64",
            os: ubuntu-latest,
            container: "ubuntu:16.04",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF",

            deps_cmdline: "echo 'Ubuntu 16 x86_64' \
            && apt-get update --fix-missing -qq \
            && apt-get install -y software-properties-common \
            && add-apt-repository -y \"ppa:git-core/ppa\" \
            && apt-get update -qq \
            && apt-get install -qq sudo git p7zip-full wget ninja-build lftp \
            \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev \
            libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev \
            libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev \
            libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa \
            libgles2-mesa-dev libmirclient-dev libproxy-dev \
            && wget -q https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh \
            && chmod uog+x cmake-3.15.4-Linux-x86_64.sh \
            && ./cmake-3.15.4-Linux-x86_64.sh --skip-license --prefix=/usr \
            && git config --global --add safe.directory '*'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-amd64",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "TAR Ubuntu 16.04 32bit",
            os: ubuntu-latest,
            container: "ubuntu:16.04",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF \
            -DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/ci_linux_gcc_toolchain_x32.cmake",

            deps_cmdline: "echo 'Ubuntu 16 x86_32' \
            && apt-get update --fix-missing -qq \
            && apt-get install -y software-properties-common \
            && add-apt-repository -y \"ppa:git-core/ppa\" \
            && dpkg --add-architecture i386 \
            && apt-get update -qq \
            && apt-get install -y sudo git p7zip-full wget ninja-build lftp gcc-multilib g++-multilib \
            libc6-dev:i386 \"^libxcb.*:i386\" libx11-dev:i386 libx11-xcb-dev:i386 libgtk-3-dev:i386 \
            libxcursor-dev:i386 libxrender-dev:i386 libxrandr-dev:i386 libxext-dev:i386 libxi-dev:i386 \
            libxss-dev:i386 libxt-dev:i386 libxv-dev:i386 libxxf86vm-dev:i386 libxinerama-dev:i386 \
            libxkbcommon-dev:i386 libfontconfig1-dev:i386 libasound2-dev:i386 libpulse-dev:i386 \
            libdbus-1-dev:i386 udev mtdev-tools webp libudev-dev:i386 libwayland-dev:i386 \
            libegl1-mesa-dev:i386 mesa-common-dev:i386 libgl1-mesa-dev:i386 libglu1-mesa-dev:i386 libgles2-mesa:i386 \
            libgles2-mesa-dev:i386 libmirclient-dev:i386 libproxy-dev:i386 \
            && wget -q https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh \
            && chmod uog+x cmake-3.15.4-Linux-x86_64.sh \
            && ./cmake-3.15.4-Linux-x86_64.sh --skip-license --prefix=/usr \
            && git config --global --add safe.directory '*'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-i386",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "TAR Ubuntu 18.04 x86_64",
            os: ubuntu-latest,
            container: "ubuntu:18.04",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF",

            deps_cmdline: "echo 'Ubuntu 18' \
            && apt-get update --fix-missing -qq \
            && apt-get install -y software-properties-common \
            && add-apt-repository -y \"ppa:git-core/ppa\" \
            && apt-get update --fix-missing -qq \
            && apt-get install -f -qq \
            && apt-get install -qq sudo git p7zip-full ninja-build wget lftp \
            \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev \
            libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev \
            libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev \
            libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev \
            libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa \
            libgles2-mesa-dev libmirclient-dev libproxy-dev \
            && wget -q https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh \
            && chmod uog+x cmake-3.15.4-Linux-x86_64.sh \
            && ./cmake-3.15.4-Linux-x86_64.sh --skip-license --prefix=/usr \
            && git config --global --add safe.directory '*'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-18-04-amd64",
            upload_directory: "www/ubuntu-18-04/"
          }
        - {
            name: "TAR Ubuntu 20.04 x86_64",
            os: ubuntu-20.04,

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "sudo apt-get update -qq \
            && sudo apt-get install -qq cmake ninja-build lftp \
            \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev \
            libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev \
            libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev \
            libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev \
            libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa \
            libgles2-mesa-dev libgles-dev libmirclient-dev libproxy-dev",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-20-04-amd64",
            upload_directory: "www/ubuntu-20-04/"
          }
        - {
            name: "TAR Ubuntu 22.04 x86_64",
            os: ubuntu-22.04,

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "sudo apt-get update -qq \
            && sudo apt-get install -qq cmake ninja-build lftp \
            \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev \
            libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev \
            libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev \
            libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev \
            libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa \
            libgles2-mesa-dev libgles-dev libproxy-dev",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-22-04-amd64",
            upload_directory: "www/ubuntu-22-04/"
          }

    steps:
    - name: Check for the upload support
      id: upload-check
      shell: bash
      run: |
        if [[ "${{ secrets.builds_login }}" != '' && \
              "${{ secrets.builds_password }}" != '' && \
              "${{ secrets.builds_host }}" != '' ]]; then
          echo "available=true" >> $GITHUB_OUTPUT;
        else
          echo "available=false" >> $GITHUB_OUTPUT;
        fi

    - uses: styfle/cancel-workflow-action@0.11.0
      with:
        workflow_id: ubuntu-tar-ci.yml
        all_but_latest: true
        access_token: ${{ github.token }}

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        cmake --version

    - uses: actions/checkout@v3

#    - uses: nelonoel/branch-name@v1.0.1
    - uses: Wohlstand/branch-name@v1.0.2-pr-test

    - name: Check if a pull request
      id: event-check
      shell: bash
      run: |
        if [[ "${BRANCH_NAME}" == *"merge"* ]]; then
          echo "--- This build is a pull-request ---"
          echo "is_pull_request=true" >> $GITHUB_OUTPUT;
        else
          echo "--- This build is a normal branch build ---"
          echo "is_pull_request=false" >> $GITHUB_OUTPUT;
        fi

    - name: Pull submodules
      shell: bash
      run: |
        git submodule init
        git submodule update

    - name: Download SMBX assets
      uses: carlosperate/download-file-action@v2
      with:
        file-url: "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-smbx13-assets-full.7z"
        file-name: smbx13.7z

    - name: Download AoD assets
      uses: carlosperate/download-file-action@v2
      with:
        file-url: "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-adventure-of-demo-assets-full.7z"
        file-name: aod.7z

    - name: Unpack all assets
      shell: bash
      run: |
        mkdir -p smbx13
        cd smbx13
        7z x ../smbx13.7z
        cd ..
        rm smbx13.7z
        mkdir -p aod
        cd aod
        7z x ../aod.7z
        cd ..
        rm aod.7z

    - name: Apply update to translations
      shell: bash
      run: |
        ASSETS_ROOT1="$PWD/smbx13"
        ASSETS_ROOT2="$PWD/aod"
        cd .github/ci-helper
        bash translate_update.sh "${ASSETS_ROOT1}"
        bash translate_update.sh "${ASSETS_ROOT2}"
        cd ../..

    - name: Configure
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
          echo "PATH environment: ${PATH}"
        fi
        if [[ "${{ secrets.DISCORD_APP_ID }}" != '' ]]; then
          LOCAL_EXTRA_SETUP="-DTHEXTECH_ENABLE_DISCORD_RPC=ON -DTHEXTECH_DISCORD_APPID=\"${{ secrets.DISCORD_APP_ID }}\""
        fi
        cmake -B build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.extra_options }} ${LOCAL_EXTRA_SETUP} .

    - name: Build
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: List dependent libraries
      if: success() && runner.os == 'Linux'
      shell: bash
      run: |
        file build/output/bin/thextech
        ldd build/output/bin/thextech


    - name: Create Package
      if: success()
      shell: bash
      # ======================================= Adventures of Demo =======================================
      # The side game about Demo and siblings from the A2XT universe by raocow and his fan community.
      # ======================================= Super Mario Bros. X - a fan-game =======================================
      # Was made in 2009 by Andrew Spinks "Redigit", and supported up to 2011 by it's original author.
      run: |
        if [[ "${BRANCH_NAME}" == *"merge"* ]]; then
            BRANCH_NAME_RES="pull-request"
            echo "-- Pull-request detected!"
        else
            BRANCH_NAME_RES=${BRANCH_NAME}
        fi

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-adventures-of-demo" \
            "advdemo${{ matrix.config.executable_name_suffix }}" \
            "thextech-adventures-of-demo-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "aod"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-super-mario-bros-x" \
            "smbx${{ matrix.config.executable_name_suffix }}" \
            "thextech-super-mario-bros-x-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "smbx13"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-bin" \
            "thextech${{ matrix.config.executable_name_suffix }}" \
            "thextech-bin-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "none"

    - name: Upload artifact
      if: success() && runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        path: build/package/*.tar.gz
        name: TheXTech ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Upload artifact
      if: success() && runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      continue-on-error: true
      with:
        path: build/package/*.7z
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Deploy to builds.wohlsoft.ru
      if: success() && github.event_name != 'pull_request' && steps.event-check.outputs.is_pull_request == 'false' && steps.upload-check.outputs.available == 'true'
      continue-on-error: true
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        UPLOAD_LIST="set ssl:verify-certificate no;"
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
            for q in ./build/package/*.7z; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
            for q in ./build/package/*.tar.gz; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        fi
        lftp -e "${UPLOAD_LIST} exit" -u ${{ secrets.builds_login }},${{ secrets.builds_password }} ${{ secrets.builds_host }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
