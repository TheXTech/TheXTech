name: Continuous Integration

on:
  push:
    branches:
      - master
      - devel
      - versus-ci
  pull_request:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu 16.04 x86_64",
            os: ubuntu-latest,
            container: "ubuntu:16.04",
            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech -DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "apt-get update -qq && apt-get install -qq sudo git p7zip-full wget ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev && wget -q https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh && chmod uog+x cmake-3.15.4-Linux-x86_64.sh && ./cmake-3.15.4-Linux-x86_64.sh --skip-license --prefix=/usr",
            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-amd64",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "Ubuntu 16.04 32bit",
            os: ubuntu-latest,
            container: "ubuntu:16.04",
            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech -DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF -DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/ci_linux_gcc_toolchain_x32.cmake",
            deps_cmdline: "dpkg --add-architecture i386 && apt-get update -qq && apt-get install -y sudo git p7zip-full wget ninja-build lftp gcc-multilib g++-multilib libc6-dev:i386 \"^libxcb.*:i386\" libx11-dev:i386 libx11-xcb-dev:i386 libgtk-3-dev:i386 libxcursor-dev:i386 libxrender-dev:i386 libxrandr-dev:i386 libxext-dev:i386 libxi-dev:i386 libxss-dev:i386 libxt-dev:i386 libxv-dev:i386 libxxf86vm-dev:i386 libxinerama-dev:i386 libxkbcommon-dev:i386 libfontconfig1-dev:i386 libasound2-dev:i386 libpulse-dev:i386 libdbus-1-dev:i386 udev mtdev-tools webp libudev-dev:i386 libwayland-dev:i386 libegl1-mesa-dev:i386 mesa-common-dev:i386 libgl1-mesa-dev:i386 libglu1-mesa-dev:i386 libgles2-mesa:i386 libgles2-mesa-dev:i386 libproxy-dev:i386 && wget -q https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh && chmod uog+x cmake-3.15.4-Linux-x86_64.sh && ./cmake-3.15.4-Linux-x86_64.sh --skip-license --prefix=/usr",
            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-i386",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "Ubuntu 18.04 x86_64",
            os: ubuntu-18.04,
            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech -DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "sudo apt-get update -qq && sudo apt-get install -qq cmake ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev",
            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-18-04-amd64",
            upload_directory: "www/ubuntu-18-04/"
          }
        - {
            name: "Ubuntu 20.04 x86_64",
            os: ubuntu-20.04,
            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech -DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "sudo apt-get update -qq && sudo apt-get install -qq cmake ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev",
            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-20-04-amd64",
            upload_directory: "www/ubuntu-20-04/"
          }
        - {
            name: "Windows - 64-bit",
            os: windows-latest,
            extra_options: "-DCMAKE_PREFIX_PATH=C:/WohlMinGWw64/mingw64 -DTHEXTECH_EXECUTABLE_NAME=thextech -DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/ci_windows_mingw_toolchain_x64.cmake",
            generator: "Ninja",
            build_type: "MinSizeRel",
            extra_path: "/c/WohlMinGWw64/mingw64/bin",
            executable_name_suffix: "-win64",
            package_filename_suffix: "win64",
            upload_directory: "www/win32/",
            mingw_download: "https://wohlsoft.ru/docs/Software/MinGW/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z", mingw_install_dir: "C:/WohlMinGWw64/",
            ninja_download: "https://wohlsoft.ru/docs/Software/Ninja-Build/ninja-win.zip", ninja_install_dir: "C:/WohlMinGWw64/mingw64/bin",
            lftp_download: "https://wohlsoft.ru/docs/Software/lftp-4.4.15.win64-openssl-1.0.1g.7z", lftp_install_dir: "C:/WohlMinGWw64/mingw64/"
          }
        - {
            name: "Windows - 32-bit",
            os: windows-latest,
            extra_options: "-DCMAKE_PREFIX_PATH=C:/WohlMinGWw64/mingw32 -DTHEXTECH_EXECUTABLE_NAME=thextech -DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/ci_windows_mingw_toolchain_x32.cmake",
            generator: "Ninja",
            build_type: "MinSizeRel",
            extra_path: "/c/WohlMinGWw64/mingw32/bin",
            executable_name_suffix: "",
            package_filename_suffix: "win32",
            upload_directory: "www/win32/",
            mingw_download: "https://wohlsoft.ru/docs/Software/MinGW/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z", mingw_install_dir: "C:/WohlMinGWw64/",
            ninja_download: "https://wohlsoft.ru/docs/Software/Ninja-Build/ninja-win.zip", ninja_install_dir: "C:/WohlMinGWw64/mingw32/bin",
            lftp_download: "https://wohlsoft.ru/docs/Software/lftp-4.4.15.win64-openssl-1.0.1g.7z", lftp_install_dir: "C:/WohlMinGWw64/mingw32/"
          }
        - {
            name: "Windows - ARM64",
            os: windows-2019,
            extra_options: "-A ARM64 -DTHEXTECH_EXECUTABLE_NAME=thextech",
            generator: "Visual Studio 16 2019",
            build_type: "MinSizeRel",
            extra_path: "/c/WohlLFTP/bin",
            executable_name_suffix: "-arm64",
            package_filename_suffix: "arm64",
            upload_directory: "www/win-arm/",
            lftp_download: "https://wohlsoft.ru/docs/Software/lftp-4.4.15.win64-openssl-1.0.1g.7z", lftp_install_dir: "C:/WohlLFTP/"
          }


    steps:
    - uses: actions/checkout@v1

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        # Pull submodules
        git submodule init
        git submodule update
        cmake --version

    - name: Download MinGW
      if: matrix.config.mingw_download
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.mingw_download }}"
        file-name: mingw.7z

    - name: Extract MinGW
      if: matrix.config.mingw_install_dir
      shell: bash
      run: |
        7z x mingw.7z -o"${{ matrix.config.mingw_install_dir }}"

    - name: Download Ninja
      if: matrix.config.ninja_download
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.ninja_download }}"
        file-name: ninja.zip

    - name: Extract Ninja
      if: matrix.config.ninja_install_dir
      shell: bash
      run: |
        7z x ninja.zip -o"${{ matrix.config.ninja_install_dir }}"

    - name: Download LFTP
      if: matrix.config.lftp_download
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.lftp_download }}"
        file-name: lftp.7z

    - name: Extract LFTP
      if: matrix.config.lftp_install_dir
      shell: bash
      run: |
        7z x lftp.7z bin etc -o"${{ matrix.config.lftp_install_dir }}"

    - name: Download SMBX assets
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-smbx13-assets-full.7z"
        file-name: smbx13.7z

    - name: Download AoD assets
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-adventure-of-demo-assets-full.7z"
        file-name: aod.7z

    - name: Unpack all assets
      shell: bash
      run: |
        mkdir -p smbx13
        cd smbx13
        7z x ../smbx13.7z
        cd ..
        rm smbx13.7z
        mkdir -p aod
        cd aod
        7z x ../aod.7z
        cd ..
        rm aod.7z

    - name: Configure
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
          echo "PATH environment: ${PATH}"
        fi
        cmake -B build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: List dependent libraries
      if: success() && runner.os == 'Linux'
      shell: bash
      run: |
        file build/output/bin/thextech
        ldd build/output/bin/thextech


    - name: Create Package
      if: success()
      shell: bash
      # ======================================= Adventures of Demo =======================================
      # The side game about Demo and siblings from the A2XT universe by raocow and his fan community.
      # ======================================= Super Mario Bros. X - a fan-game =======================================
      # Was made in 2009 by Andrew Spinks "Redigit", and supported up to 2011 by it's original author.
      run: |
        if [[ "${BRANCH_NAME}" == *"merge"* ]]; then
            BRANCH_NAME_RES="pull-request"
            echo "-- Pull-request detected!"
        else
            BRANCH_NAME_RES=${BRANCH_NAME}
        fi

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-adventures-of-demo" \
            "advdemo${{ matrix.config.executable_name_suffix }}" \
            "thextech-adventures-of-demo-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "aod"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-super-mario-bros-x" \
            "smbx${{ matrix.config.executable_name_suffix }}" \
            "thextech-super-mario-bros-x-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "smbx13"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-bin" \
            "thextech${{ matrix.config.executable_name_suffix }}" \
            "thextech-bin-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME_RES}" \
            "none"

    - name: Upload artifact
      if: success() && runner.os == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        path: build/package/*.tar.gz
        name: TheXTech ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Upload artifact
      if: success() && runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        path: build/package/*.7z
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Deploy to builds.wohlsoft.ru
      if: success() && github.event_name != 'pull_request'
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        UPLOAD_LIST="set ssl:verify-certificate no;"
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
            for q in ./build/package/*.7z; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
            for q in ./build/package/*.tar.gz; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        fi
        lftp -e "${UPLOAD_LIST} exit" -u ${{ secrets.builds_login }},${{ secrets.builds_password }} ${{ secrets.builds_host }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
