def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def release_store_password = System.env.RELEASE_STORE_PASSWORD
def release_key_password = System.env.RELEASE_KEY_PASSWORD
def release_key_alias = System.env.RELEASE_KEY_ALIAS
def pin_alias = System.env.PIN_ALIAS
def db_pass_alias = System.env.DB_PASS_ALIAS


android {
    compileSdkVersion 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "ru.wohlsoft.thextech"
        }
        minSdkVersion 16
        targetSdkVersion 31
// FIXME: Automatize the version taking from the version.cmake at the repository root
        versionName "1.3.6-dev"
        versionCode 1030600
        externalNativeBuild {
            // REPLACE THIS with CMAKE build, HOW TO:
            // https://stackoverflow.com/questions/47604628/use-externalproject-add-to-include-opus-in-android
//            ndkBuild {
//                arguments "APP_PLATFORM=android-16"
//                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//            }
            cmake {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                arguments "-DANDROID_PLATFORM=16 -DAPP_PLATFORM=android-16"
            }
        }
        ndk{
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    signingConfigs {
        releaseci {
            storeFile file("../release-key.jks")
            storePassword = release_store_password
            keyAlias = release_key_alias
            keyPassword = release_key_password
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        releaseci {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "PIN_ALIAS", "\"$pin_alias\""
            buildConfigField "String", "DB_PASS_ALIAS", "\"$db_pass_alias\""
            signingConfig signingConfigs.releaseci
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEVDEBUG'
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets {
            main {
                jniLibs.srcDirs += "jniLibs"
            }
            debug {
                jniLibs.srcDirs += "jniLibs/debug"
            }
            release {
                jniLibs.srcDirs += ["jniLibs/release", "jniLibs/minsizerel"]
            }
            releaseci {
                jniLibs.srcDirs += ["jniLibs/release", "jniLibs/minsizerel"]
            }
        }
        externalNativeBuild {
            cmake {
                path "../../CMakeLists.txt"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

//    packagingOptions {
//        pickFirst 'lib/armeabi-v7a/libhidapi.so'
//        pickFirst 'lib/arm64-v8a/libhidapi.so'
//        pickFirst 'lib/x86/libhidapi.so'
//        pickFirst 'lib/x86_64/libhidapi.so'
//    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "ru.wohlsoft.thextech.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'jniLibs')
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.preference:preference:1.1.1'
}
